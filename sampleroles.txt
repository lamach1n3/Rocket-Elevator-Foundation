
   add_reference :employess, :user



   master clean
   public repo during the deployment
   cap production deploy
   ssh ubuntu@(ip addresse from production.rb server"99.79.123.96")
   ssh ubuntu@99.79.123.96
   now connecte on the amazon
   ls all apps are there 
   move to your app 
   move to shared
   move to config
   sudo nano database.yml
   copy and paste the database

++++++++++++++++++++
default: &default
  adapter: mysql2
  encoding: utf8
  username: codeboxx
  password: Codeboxx1!
  host: codeboxx.cq6zrczewpu2.us-east-1.rds.amazonaws.com
  port: 3306


development:
  <<: *default
  database: jft_mysql

+++++++++++++++

  save and quit
  and exit with exit

  
  cap production puma:config
  cap production puma:nginx_config
  ask coach to do the config puma and nginx you will supply domaine name

  dns config in awls
  type A ip address is the one from production

  wait for the coach okay
  cap production deploy


  sddss
default: &default
  adapter: mysql2
  encoding: utf8
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  username: root
  password: Admin007*
  socket: /var/run/mysqld/mysqld.sock

development:
  <<: *default
  database: Rocket_Elevators_Information_System_development


test:
  <<: *default
  database: Rocket_Elevators_Information_System_test




production:
  <<: *default
  database: Rocket_Elevators_Information_System_production
  username: Rocket_Elevators_Information_System
  password: <%= ENV['ROCKET_ELEVATORS_INFORMATION_SYSTEM_DATABASE_PASSWORD'] %>


<div class="container form col-md-4">
    <div id="name" class="col-md-4" style="display:none">
        <%= f.label :quotes_name %>
        <%= f.text_field :quotes_name %>
    </div>
     <div id="email" class="col-md-4" style="display:none">
        <%= f.label :quotes_email %>
        <%= f.text_field :quotes_email %>
    </div>
     <div id="company name" class="col-md-4" style="display:none">
        <%= f.label :quotes_company_name %>
        <%= f.text_field :quotes_company_name %>
    </div>
</div>

feed 404 when wrong address
if route redirect to 404
news mcourier 
rails g model full_name:string email:string phone:string company_name:string project_name:string department:string project_description:string message:text contact_attachment:binary



# double check for the date creation CUstomer can we use the t.timestamp
gonna add models tonigth 
clean the root directory
push on dev
fix readme add users login add forgot password\
add gemas
4 ligne de code pr vsc


 
    # Logic to connect to the dropbox account, create a diretory for the client, export the binary files to dropbox client's directory, delete the binary file from MySQL database 
    def dropbox
      puts "========================dropbox========================="
      puts @lead.id
      puts @lead.email
      puts @lead.file_attachment
      puts "========================dropbox========================="
      puts "========================dropbox========================="

     client = DropboxApi::Client.new(ENV["DROPBOX_API_TOKEN"])

   
       # for each lead that has this email  
      Lead.where(email: @lead.email).each do |lead|  
        
         # check if the attached_file is NOT null
        unless lead.file_attachment.nil? 
          dir_path = "/" + @lead.company_name   
          begin           
            # create a folder named (use the company_name) if there is no folder for this customer yet
            client.create_folder dir_path  
          rescue DropboxApi::Errors::FolderConflictError => err
            puts "Folder already exists in path, ignoring folder creation. Continue to upload files."
          end  
          begin
            client.upload(dir_path + "/" + lead.filename, lead.file_attachment)     # send file to user's folder at dropbox
          rescue DropboxApi::Errors::FileConflictError => err
            puts "File already exists in folder, ignoring file upload. Continue to delete file from database."
           end  

          @lead.file_attachment = nil;
          @lead.save!
        end
      end
    end 